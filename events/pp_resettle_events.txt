namespace = resettle

# Energy costs for machine relocation
@pp_relocation_cost = -50

# Energy costs for purge world relocation
@pp_relocation_purge_world_cost = -25

# migration
country_event = {
    id = resettle.1
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        # only regular non-machine empires migrate
        is_regular_empire = yes
        is_machine_empire = no
    }

    immediate = {
        # log = "PP::resettle.1([This.GetName])"

        # spread out events for performance and immersion
        every_owned_pop = { pop_event = { id = resettle.10 days = 5 random = 20 } }
    }    
}

# migrate pop
pop_event = {
    id = resettle.10
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        # only regular machine empires relocate
        owner = { is_regular_empire = yes }
        owner = { is_machine_empire = no }

        # exclude pops that are being purged, assimilated or enslaved
        is_being_purged = no
        is_being_assimilated = no
        is_enslaved = no

        # exclude robots without full rights
        OR = {
            is_robot_pop = no
            owner = { has_policy_flag = ai_full_rights }
        }
    }
    
	immediate = {
        # log = "PP::resettle.10([This.GetName])"
        
        random_list = {
            # nothing happens
            5000 = {  }

            # migrate
            1 = {
                # no emigration from planets with plentiful housing
                modifier = { factor = 0.00000	planet = { free_housing >  20 }                                      }
                modifier = { factor = 0.50887	planet = { free_housing >  10 }     planet = { free_housing <=  20 } }
                modifier = { factor = 0.75000	planet = { free_housing >   0 }     planet = { free_housing <=  10 } }
                modifier = { factor = 0.99113	planet = { free_housing >  -5 }     planet = { free_housing <=   0 } }
                modifier = { factor = 1.09659	planet = { free_housing > -10 }     planet = { free_housing <=  -5 } }
                modifier = { factor = 1.18709	planet = { free_housing > -15 }     planet = { free_housing <= -10 } }
                modifier = { factor = 1.26170	planet = { free_housing > -20 }     planet = { free_housing <= -15 } }
                modifier = { factor = 1.32120	                                    planet = { free_housing <= -20 } }

                # no emigration from planets with plentiful jobs
                modifier = { factor = 0.00000	planet = { free_jobs >  20 }                                      }
                modifier = { factor = 0.67235	planet = { free_jobs >  10 }        planet = { free_jobs <=  20 } }
                modifier = { factor = 0.94385	planet = { free_jobs >   0 }        planet = { free_jobs <=  10 } }
                modifier = { factor = 1.25000	planet = { free_jobs >  -5 }        planet = { free_jobs <=   0 } }
                modifier = { factor = 1.40544	planet = { free_jobs > -10 }        planet = { free_jobs <=  -5 } }
                modifier = { factor = 1.55615	planet = { free_jobs > -15 }        planet = { free_jobs <= -10 } }
                modifier = { factor = 1.69795	planet = { free_jobs > -20 }        planet = { free_jobs <= -15 } }
                modifier = { factor = 1.82765	                                    planet = { free_jobs <= -20 } }

                # rulers seldom migrate
                modifier = { factor = 0.10000 is_pop_category = ruler }

                # specialists occasionally migrate
                modifier = { factor = 0.50000 is_pop_category = specialist }

                # pop is unemployed itself
                modifier = { factor = 3.33333 is_unemployed = yes }
                
                # set migrating flag
                set_pop_flag = pp_pop_is_migrating

                log = "PP::'Migrating [This.GetName]!'"

                # migration within the same country
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # prioritize planets in same country
                            owner = { is_same_empire = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize special planets
                            OR = {
                                is_planet_class = pc_gaia
                                is_planet_class = pc_city
                                is_planet_class = pc_habitat
                                is_planet_class = pc_ringworld_habitable
                            }
                        }
    
                        log = "PP::'Migrating [Root.GetName] to [This.GetClassName] Planet [This.GetName]!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # prioritize planets in same country
                            owner = { is_same_empire = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize planets with higher habitability
                            habitability = { who = root value >= 0.8 }
                        }
    
                        log = "PP::'Migrating [Root.GetName] to [This.GetClassName] Planet [This.GetName] (80-100)!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # prioritize planets in same country
                            owner = { is_same_empire = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize planets with higher habitability
                            habitability = { who = root value >= 0.6 }
                        }
    
                        log = "PP::'Migrating [Root.GetName] to [This.GetClassName] Planet [This.GetName] (60-80)!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }

                # migration to other empires with migration treaty
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # include planets in other countries with migration access
                            owner = { has_migration_access = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize special planets
                            OR = {
                                is_planet_class = pc_gaia
                                is_planet_class = pc_city
                                is_planet_class = pc_habitat
                                is_planet_class = pc_ringworld_habitable
                            }
                        }
    
                        # log = "PP::'Migrating [Root.GetName] to [This.Owner.GetAdj] [This.GetClassName] Planet [This.GetName]!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # include planets in other countries with migration access
                            owner = { has_migration_access = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize planets with higher habitability
                            habitability = { who = root value >= 0.8 }
                        }
    
                        log = "PP::'Migrating [Root.GetName] to [This.Owner.GetAdj] [This.GetClassName] Planet [This.GetName] (80-100)!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                    random_planet = {
                        limit = {
                            # include planets in other countries with migration access
                            owner = { has_migration_access = root.owner }

                            # only migrate to planets with free jobs and housing
                            free_jobs > 0
                            free_housing > 0

                            # not under siege
                            has_orbital_bombardment = no

                            # no colonies in development
                            is_under_colonization = no 

                            # prioritize planets with higher habitability
                            habitability = { who = root value >= 0.6 }
                        }
    
                        log = "PP::'Migrating [Root.GetName] to [This.Owner.GetAdj] [This.GetClassName] Planet [This.GetName] (60-80)!'"
                            
                        # resettle and remove flag
                        resettle_pop = { pop = root planet = this }
                        root = { remove_pop_flag = pp_pop_is_migrating }
                    }
                }

                # no migration destination found
                if = { 
                    limit = { has_pop_flag = pp_pop_is_migrating }
                   
                    log = "PP::'Migration failed, no suitable destination found!'"

                    # remove flag
                    remove_pop_flag = pp_pop_is_migrating
                }
            }
        }
    }
}

# machine relocation
country_event = {
    id = resettle.2
    hide_window = yes
    is_triggered_only = yes
    
    trigger = {
        # only regular machine empires relocate
        is_regular_empire = yes
        is_machine_empire = yes

        # only relocate when policy is active
        has_policy_flag = pp_relocation_imperative_active 
    }

    immediate = {
        # log = "PP::resettle.2([This.GetName])"

        # spread out events for performance and immersion
        every_owned_pop = { pop_event = { id = resettle.20 days = 5 random = 20 } }
    }    
}

# relocate pop
pop_event = {
    id = resettle.20
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        # only regular machine empires relocate
        owner = { is_regular_empire = yes }
        owner = { is_machine_empire = yes }

        # only relocate when policy is active
        owner = { has_policy_flag = pp_relocation_imperative_active }
        
        # only relocate when resource cost can be paid
        owner = { has_resource = { type = energy amount = @pp_relocation_cost } }

        # only relocate simple drones
        is_pop_category = simple_drone

        # only relocate unemployed pops or those on overcrowded planets
        OR = {
            is_unemployed = yes
            planet = { free_housing < 0 }
        }
        
        # exclude pops that are being purged or assimilated
        is_being_purged = no
        is_being_assimilated = no        
    }
    
	immediate = {
        # log = "PP::resettle.20([This.GetName])"

        owner = {
            random_owned_planet = {
                limit = {
                    free_jobs > 0
                    free_housing > 0
                    is_under_colonization = no 
                }

                log = "PP::'Relocating Machine [Prev.Prev.GetName] to [This.GetName]!'"
            
                # pay cost
                owner = { add_resource = { energy = @pp_relocation_cost } }
                
                # relocate
                resettle_pop = { pop = PREVPREV planet = this }
            }
        }
    }
}

# purge world relocation
country_event = {
    id = resettle.3
    hide_window = yes
    is_triggered_only = yes
    
    trigger = {
        # only regular empires relocate
        is_regular_empire = yes

        # only relocate if there are any purge worlds
        any_owned_planet = { has_modifier = pp_purge_world }
    }

    immediate = {
        # log = "PP::resettle.3([This.GetName])"

        # spread out events for performance and immersion
        every_owned_pop = { pop_event = { id = resettle.30 days = 5 random = 20 } }
    }    
}

# relocate individual undesirable
pop_event = {
    id = resettle.30
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        # only regular empires relocate
        owner = { is_regular_empire = yes }
        
        # only relocate when resource cost can be paid
        owner = { has_resource = { type = energy amount = @pp_relocation_purge_world_cost } }

        # only relocate pops that are being purged on a non-purge world
        planet = { NOT = { has_modifier = pp_purge_world } }
        is_being_purged = yes
        is_being_assimilated = no
    }
    
	immediate = {
        # log = "PP::resettle.30([This.GetName])"

        owner = {
            random_owned_planet = {
                limit = {
                    has_modifier = pp_purge_world
                }

                log = "PP::'Relocating Undesirable [Prev.Prev.GetName] to [This.GetName]!'"
            
                # pay cost
                owner = { add_resource = { energy = @pp_relocation_purge_world_cost } }
                
                # relocate
                resettle_pop = { pop = PREVPREV planet = this }
            }
        }
    }
}